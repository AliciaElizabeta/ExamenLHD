<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_md_src_main_java_com_thealgorithms_datastructures_lists__r_e_a_d_m_e" xml:lang="en-US">
<section xml:id="_md_src_main_java_com_thealgorithms_datastructures_lists__r_e_a_d_m_e_1autotoc_md16">
<title>Description</title>

<para>LinkedList is a data structure in which data is stored in a linear manner. It usually contains a data field and a link to the memory location of the next mode.</para>
</section>
<section xml:id="_md_src_main_java_com_thealgorithms_datastructures_lists__r_e_a_d_m_e_1autotoc_md17">
<title>Structure</title>

<para><literallayout><computeroutput>class&#32;LinkedList&lt;E&gt;{
&#32;&#32;&#32;&#32;E&#32;value;
&#32;&#32;&#32;&#32;LinkedList&#32;next;
}
</computeroutput></literallayout></para>

<para>The <computeroutput>next</computeroutput> variable points to the next node in the data structure and value stores the data. Any number of nodes can be linked in this manner. The structure will be:</para>
</section>
<section xml:id="_md_src_main_java_com_thealgorithms_datastructures_lists__r_e_a_d_m_e_1autotoc_md18">
<title>Properties</title>

<para><orderedlist>
<listitem>
<para>Linked list does not provide indexing like an array. For accessing a node at position <computeroutput>p</computeroutput> , &#952;(p) nodes need to be accessed.</para>
</listitem><listitem>
<para>Main advantage of linked list is addition and removal of nodes near the end and beginning of lists. It can be done just by updating the link (O(1) time)</para>
</listitem><listitem>
<para>Unlike an array, its size is not predefined. So any number of nodes can be appended.</para>
</listitem></orderedlist>
</para>
</section>
<section xml:id="_md_src_main_java_com_thealgorithms_datastructures_lists__r_e_a_d_m_e_1autotoc_md19">
<title>File descriptions:</title>

<para><orderedlist>
<listitem>
<para><computeroutput>CircleLinkedList.java</computeroutput> : A circular linked list where next pointer of last node points to first nide of linked list.</para>
</listitem><listitem>
<para><computeroutput>SinglyLinkedList.java</computeroutput> : The classic case of single links.</para>
</listitem><listitem>
<para><computeroutput>CountSinglyLinkedListRecursion.java</computeroutput>: Recursively counts the size of a list.</para>
</listitem><listitem>
<para><computeroutput>CreateAndDetectLoop.java</computeroutput> : Create and detect a loop in a linked list.</para>
</listitem><listitem>
<para><computeroutput>DoublyLinkedList.java</computeroutput> : A modification of singly linked list which has a <computeroutput>prev</computeroutput> pointer to point to the previous node.</para>
</listitem><listitem>
<para><computeroutput>Merge_K_SortedLinkedlist.java</computeroutput> : Merges K sorted linked list with mergesort (mergesort is also the most efficient sorting algorithm for linked list).</para>
</listitem><listitem>
<para><computeroutput>RandomNode.java</computeroutput> : Selects a random node from given linked list and diplays it. </para>
</listitem></orderedlist>
</para>
</section>
</section>
