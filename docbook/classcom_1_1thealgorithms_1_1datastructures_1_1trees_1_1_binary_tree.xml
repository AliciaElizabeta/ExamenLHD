<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classcom_1_1thealgorithms_1_1datastructures_1_1trees_1_1_binary_tree" xml:lang="en-US">
<title>com.thealgorithms.datastructures.trees.BinaryTree Class Reference</title>
<indexterm><primary>com.thealgorithms.datastructures.trees.BinaryTree</primary></indexterm>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>class <emphasis role="strong">Node</emphasis></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classcom_1_1thealgorithms_1_1datastructures_1_1trees_1_1_binary_tree_1a69436a3b2e53ebd3e3f0665f6d234c0e">BinaryTree</link> ()</para>
</listitem>
            <listitem><para><link linkend="_classcom_1_1thealgorithms_1_1datastructures_1_1trees_1_1_binary_tree_1ab9e487807f721354aa13bbb38e99ef5f">BinaryTree</link> (Node root)</para>
</listitem>
            <listitem><para>Node <link linkend="_classcom_1_1thealgorithms_1_1datastructures_1_1trees_1_1_binary_tree_1a7dad30c4d35a9dd2e043e82bc5c551a3">find</link> (int key)</para>
</listitem>
            <listitem><para>void <link linkend="_classcom_1_1thealgorithms_1_1datastructures_1_1trees_1_1_binary_tree_1a2891e2c21650c718c2afe854865d47c0">put</link> (int value)</para>
</listitem>
            <listitem><para>boolean <link linkend="_classcom_1_1thealgorithms_1_1datastructures_1_1trees_1_1_binary_tree_1a56cef2f2f9553918cc05a9b1104eb39e">remove</link> (int value)</para>
</listitem>
            <listitem><para>Node <link linkend="_classcom_1_1thealgorithms_1_1datastructures_1_1trees_1_1_binary_tree_1a164f2bf990d857b9b20f1c74cbc02cca">findSuccessor</link> (Node n)</para>
</listitem>
            <listitem><para>Node <link linkend="_classcom_1_1thealgorithms_1_1datastructures_1_1trees_1_1_binary_tree_1ae8e289bab9eba4c36ff4239c732b4f60">getRoot</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_classcom_1_1thealgorithms_1_1datastructures_1_1trees_1_1_binary_tree_1aeda3f29c49b9666c6ecd633aefa73ddc">inOrder</link> (Node localRoot)</para>
</listitem>
            <listitem><para>void <link linkend="_classcom_1_1thealgorithms_1_1datastructures_1_1trees_1_1_binary_tree_1a08350b3a505eefa385697b1a6a8ed9e3">preOrder</link> (Node localRoot)</para>
</listitem>
            <listitem><para>void <link linkend="_classcom_1_1thealgorithms_1_1datastructures_1_1trees_1_1_binary_tree_1abeece5b22c43dae6bbc786cab6dc0a4a">postOrder</link> (Node localRoot)</para>
</listitem>
            <listitem><para>void <link linkend="_classcom_1_1thealgorithms_1_1datastructures_1_1trees_1_1_binary_tree_1a67e6503c3f9315c0c5b6d700b7d772c3">bfs</link> (Node localRoot)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>This entire class is used to build a Binary Tree data structure. There is the Node Class and the Tree Class, both explained below. A binary tree is a data structure in which an element has two successors(children). The left child is usually smaller than the parent, and the right child is usually bigger.</para>

<para><formalpara><title>Author</title>

<para>Unknown </para>
</formalpara>
</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classcom_1_1thealgorithms_1_1datastructures_1_1trees_1_1_binary_tree_1a69436a3b2e53ebd3e3f0665f6d234c0e"/><section>
    <title>BinaryTree()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>BinaryTree</primary><secondary>com.thealgorithms.datastructures.trees.BinaryTree</secondary></indexterm>
<indexterm><primary>com.thealgorithms.datastructures.trees.BinaryTree</primary><secondary>BinaryTree</secondary></indexterm>
<para><computeroutput>com.thealgorithms.datastructures.trees.BinaryTree.BinaryTree ( )</computeroutput></para>
<para>Constructor </para>
</section>
<anchor xml:id="_classcom_1_1thealgorithms_1_1datastructures_1_1trees_1_1_binary_tree_1ab9e487807f721354aa13bbb38e99ef5f"/><section>
    <title>BinaryTree()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>BinaryTree</primary><secondary>com.thealgorithms.datastructures.trees.BinaryTree</secondary></indexterm>
<indexterm><primary>com.thealgorithms.datastructures.trees.BinaryTree</primary><secondary>BinaryTree</secondary></indexterm>
<para><computeroutput>com.thealgorithms.datastructures.trees.BinaryTree.BinaryTree (Node root)</computeroutput></para>
<para>Parameterized Constructor </para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classcom_1_1thealgorithms_1_1datastructures_1_1trees_1_1_binary_tree_1a67e6503c3f9315c0c5b6d700b7d772c3"/><section>
    <title>bfs()</title>
<indexterm><primary>bfs</primary><secondary>com.thealgorithms.datastructures.trees.BinaryTree</secondary></indexterm>
<indexterm><primary>com.thealgorithms.datastructures.trees.BinaryTree</primary><secondary>bfs</secondary></indexterm>
<para><computeroutput>void com.thealgorithms.datastructures.trees.BinaryTree.bfs (Node localRoot)</computeroutput></para>
<para>Prints the tree in a breadth first search order This is similar to pre-order traversal, but instead of being implemented with a stack (or recursion), it is implemented with a queue</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>localRoot</entry><entry>
<para>The local root of the binary tree </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_classcom_1_1thealgorithms_1_1datastructures_1_1trees_1_1_binary_tree_1a7dad30c4d35a9dd2e043e82bc5c551a3"/><section>
    <title>find()</title>
<indexterm><primary>find</primary><secondary>com.thealgorithms.datastructures.trees.BinaryTree</secondary></indexterm>
<indexterm><primary>com.thealgorithms.datastructures.trees.BinaryTree</primary><secondary>find</secondary></indexterm>
<para><computeroutput>Node com.thealgorithms.datastructures.trees.BinaryTree.find (int key)</computeroutput></para>
<para>Method to find a Node with a certain value</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>key</entry><entry>
<para>Value being looked for </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The node if it finds it, otherwise returns the parent </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classcom_1_1thealgorithms_1_1datastructures_1_1trees_1_1_binary_tree_1a164f2bf990d857b9b20f1c74cbc02cca"/><section>
    <title>findSuccessor()</title>
<indexterm><primary>findSuccessor</primary><secondary>com.thealgorithms.datastructures.trees.BinaryTree</secondary></indexterm>
<indexterm><primary>com.thealgorithms.datastructures.trees.BinaryTree</primary><secondary>findSuccessor</secondary></indexterm>
<para><computeroutput>Node com.thealgorithms.datastructures.trees.BinaryTree.findSuccessor (Node n)</computeroutput></para>
<para>This method finds the Successor to the Node given. Move right once and go left down the tree as far as you can</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>n</entry><entry>
<para>Node that you want to find the Successor of </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The Successor of the node </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classcom_1_1thealgorithms_1_1datastructures_1_1trees_1_1_binary_tree_1ae8e289bab9eba4c36ff4239c732b4f60"/><section>
    <title>getRoot()</title>
<indexterm><primary>getRoot</primary><secondary>com.thealgorithms.datastructures.trees.BinaryTree</secondary></indexterm>
<indexterm><primary>com.thealgorithms.datastructures.trees.BinaryTree</primary><secondary>getRoot</secondary></indexterm>
<para><computeroutput>Node com.thealgorithms.datastructures.trees.BinaryTree.getRoot ( )</computeroutput></para>
<para>Returns the root of the Binary Tree</para>

<para><formalpara><title>Returns</title>

<para>the root of the Binary Tree </para>
</formalpara>
</para>
</section>
<anchor xml:id="_classcom_1_1thealgorithms_1_1datastructures_1_1trees_1_1_binary_tree_1aeda3f29c49b9666c6ecd633aefa73ddc"/><section>
    <title>inOrder()</title>
<indexterm><primary>inOrder</primary><secondary>com.thealgorithms.datastructures.trees.BinaryTree</secondary></indexterm>
<indexterm><primary>com.thealgorithms.datastructures.trees.BinaryTree</primary><secondary>inOrder</secondary></indexterm>
<para><computeroutput>void com.thealgorithms.datastructures.trees.BinaryTree.inOrder (Node localRoot)</computeroutput></para>
<para>Prints leftChild - root - rightChild This is the equivalent of a depth first search</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>localRoot</entry><entry>
<para>The local root of the binary tree </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_classcom_1_1thealgorithms_1_1datastructures_1_1trees_1_1_binary_tree_1abeece5b22c43dae6bbc786cab6dc0a4a"/><section>
    <title>postOrder()</title>
<indexterm><primary>postOrder</primary><secondary>com.thealgorithms.datastructures.trees.BinaryTree</secondary></indexterm>
<indexterm><primary>com.thealgorithms.datastructures.trees.BinaryTree</primary><secondary>postOrder</secondary></indexterm>
<para><computeroutput>void com.thealgorithms.datastructures.trees.BinaryTree.postOrder (Node localRoot)</computeroutput></para>
<para>Prints rightChild - leftChild - root</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>localRoot</entry><entry>
<para>The local root of the binary tree </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_classcom_1_1thealgorithms_1_1datastructures_1_1trees_1_1_binary_tree_1a08350b3a505eefa385697b1a6a8ed9e3"/><section>
    <title>preOrder()</title>
<indexterm><primary>preOrder</primary><secondary>com.thealgorithms.datastructures.trees.BinaryTree</secondary></indexterm>
<indexterm><primary>com.thealgorithms.datastructures.trees.BinaryTree</primary><secondary>preOrder</secondary></indexterm>
<para><computeroutput>void com.thealgorithms.datastructures.trees.BinaryTree.preOrder (Node localRoot)</computeroutput></para>
<para>Prints root - leftChild - rightChild</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>localRoot</entry><entry>
<para>The local root of the binary tree </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_classcom_1_1thealgorithms_1_1datastructures_1_1trees_1_1_binary_tree_1a2891e2c21650c718c2afe854865d47c0"/><section>
    <title>put()</title>
<indexterm><primary>put</primary><secondary>com.thealgorithms.datastructures.trees.BinaryTree</secondary></indexterm>
<indexterm><primary>com.thealgorithms.datastructures.trees.BinaryTree</primary><secondary>put</secondary></indexterm>
<para><computeroutput>void com.thealgorithms.datastructures.trees.BinaryTree.put (int value)</computeroutput></para>
<para>Inserts certain value into the Binary Tree</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>value</entry><entry>
<para>Value to be inserted </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_classcom_1_1thealgorithms_1_1datastructures_1_1trees_1_1_binary_tree_1a56cef2f2f9553918cc05a9b1104eb39e"/><section>
    <title>remove()</title>
<indexterm><primary>remove</primary><secondary>com.thealgorithms.datastructures.trees.BinaryTree</secondary></indexterm>
<indexterm><primary>com.thealgorithms.datastructures.trees.BinaryTree</primary><secondary>remove</secondary></indexterm>
<para><computeroutput>boolean com.thealgorithms.datastructures.trees.BinaryTree.remove (int value)</computeroutput></para>
<para>Deletes a given value from the Binary Tree</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>value</entry><entry>
<para>Value to be deleted </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>If the value was deleted </para>
</formalpara>
</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
src/main/java/com/thealgorithms/datastructures/trees/BinaryTree.java</section>
</section>
