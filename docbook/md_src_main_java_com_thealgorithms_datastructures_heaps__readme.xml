<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_md_src_main_java_com_thealgorithms_datastructures_heaps__readme" xml:lang="en-US">

<para><emphasis role="bold"><formalpara><title>HEAP DATA STRUCTURE</title></formalpara>
</emphasis></para>

<para><emphasis role="bold"></emphasis> </para>

<para>A Heap is a special Tree-based data structure in which the tree is a complete binary tree.</para>
<section xml:id="_md_src_main_java_com_thealgorithms_datastructures_heaps__readme_1autotoc_md9">
<title>&lt;h2&gt;Complete Binary Tree&lt;/h2&gt;</title>

<para>A complete binary tree is a binary tree in which all the levels except the last level, i.e., leaf node should be completely filled, and all the nodes should be left-justified.</para>

<para><literallayout><computeroutput>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;10
&#32;&#32;&#32;&#32;&#32;&#32;/&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;20&#32;&#32;&#32;&#32;&#32;&#32;30
&#32;&#32;&#32;/&#32;&#32;\&#32;&#32;&#32;&#32;
&#32;&#32;40&#32;&#32;&#32;50
&#32;&#32;
COMPLETE&#32;BINARY&#32;TREE
</computeroutput></literallayout></para>
</section>
<section xml:id="_md_src_main_java_com_thealgorithms_datastructures_heaps__readme_1autotoc_md10">
<title>&lt;h2&gt;Types of Heap&lt;/h2&gt;</title>

<para>Generally, Heaps can be of two types: 
<literallayout>&#160;&#xa;</literallayout>
 <emphasis role="bold">Max-Heap:</emphasis> In a Max-Heap the key present at the root node must be greatest among the keys present at all of it’s children. The same property must be recursively true for all sub-trees in that Binary Tree. 
<literallayout>&#160;&#xa;</literallayout>
 <emphasis role="bold">Min-Heap:</emphasis> In a Min-Heap the key present at the root node must be minimum among the keys present at all of it’s children. The same property must be recursively true for all sub-trees in that Binary Tree. </para>

<para><literallayout><computeroutput>&#32;&#32;&#32;&#32;&#32;&#32;10
&#32;&#32;&#32;&#32;/&#32;&#32;&#32;&#32;\
&#32;&#32;20&#32;&#32;&#32;&#32;&#32;&#32;30
&#32;/&#32;&#32;\&#32;&#32;&#32;&#32;/&#32;&#32;\
40&#32;&#32;50&#32;&#32;60&#32;&#32;70

&#32;&#32;&#32;&#32;MIN&#32;HEAP
</computeroutput></literallayout></para>

<para><literallayout><computeroutput>&#32;&#32;&#32;&#32;&#32;&#32;70
&#32;&#32;&#32;&#32;/&#32;&#32;&#32;&#32;\
&#32;&#32;50&#32;&#32;&#32;&#32;&#32;&#32;60
&#32;/&#32;&#32;\&#32;&#32;&#32;&#32;/&#32;&#32;\
40&#32;&#32;30&#32;&#32;10&#32;&#32;&#32;20

&#32;&#32;&#32;&#32;MAX&#32;HEAP
</computeroutput></literallayout></para>
</section>
<section xml:id="_md_src_main_java_com_thealgorithms_datastructures_heaps__readme_1autotoc_md11">
<title>&lt;h2&gt;Min Heap Construction Algorithm&lt;/h2&gt;</title>

<para><literallayout><computeroutput>Step&#32;1&#32;−&#32;Create&#32;a&#32;new&#32;node&#32;at&#32;the&#32;end&#32;of&#32;heap.
Step&#32;2&#32;−&#32;Assign&#32;new&#32;value&#32;to&#32;the&#32;node.
Step&#32;3&#32;−&#32;Compare&#32;the&#32;value&#32;of&#32;this&#32;child&#32;node&#32;with&#32;its&#32;parent.
Step&#32;4&#32;−&#32;If&#32;value&#32;of&#32;parent&#32;is&#32;more&#32;than&#32;child,&#32;then&#32;swap&#32;them.
Step&#32;5&#32;−&#32;Repeat&#32;step&#32;3&#32;&amp;&#32;4&#32;until&#32;Heap&#32;property&#32;holds.
</computeroutput></literallayout></para>

<para><literallayout><computeroutput>Add&#32;15

&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;10&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;10&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;10
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;/&#32;&#32;&#32;&#32;\&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;/&#32;&#32;&#32;\&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;/&#32;&#32;&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;20&#32;&#32;&#32;&#32;&#32;&#32;30&#32;&#32;&#32;&#32;------&gt;&#32;&#32;&#32;&#32;&#32;&#32;20&#32;&#32;&#32;&#32;&#32;30&#32;&#32;&#32;------&gt;&#32;&#32;&#32;&#32;&#32;20&#32;&#32;&#32;&#32;&#32;15
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;/&#32;&#32;\&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;/&#32;&#32;\&#32;&#32;&#32;/&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;/&#32;&#32;\&#32;&#32;&#32;&#32;/&#32;&#32;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;40&#32;&#32;50&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;40&#32;&#32;&#32;50&#32;&#32;15&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;40&#32;&#32;50&#32;&#32;30
</computeroutput></literallayout></para>
</section>
<section xml:id="_md_src_main_java_com_thealgorithms_datastructures_heaps__readme_1autotoc_md12">
<title>&lt;h2&gt;Min Heap Deletion Algorithm&lt;/h2&gt;</title>

<para><literallayout><computeroutput>Step&#32;1&#32;−&#32;Remove&#32;root&#32;node.
Step&#32;2&#32;−&#32;Move&#32;the&#32;last&#32;element&#32;of&#32;last&#32;level&#32;to&#32;root.
Step&#32;3&#32;−&#32;Compare&#32;the&#32;value&#32;of&#32;this&#32;child&#32;node&#32;with&#32;its&#32;parent.
Step&#32;4&#32;−&#32;If&#32;value&#32;of&#32;parent&#32;is&#32;more&#32;than&#32;child,&#32;then&#32;swap&#32;them.
Step&#32;5&#32;−&#32;Repeat&#32;step&#32;3&#32;&amp;&#32;4&#32;until&#32;Heap&#32;property&#32;holds.
</computeroutput></literallayout></para>

<para><literallayout><computeroutput>Delete&#32;10

&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;10&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;50&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;20&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;20
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;/&#32;&#32;&#32;&#32;\&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;/&#32;&#32;&#32;\&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;/&#32;&#32;&#32;\&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;/&#32;&#32;\
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;20&#32;&#32;&#32;&#32;&#32;&#32;30&#32;&#32;&#32;&#32;------&gt;&#32;&#32;&#32;&#32;&#32;&#32;20&#32;&#32;&#32;&#32;&#32;30&#32;&#32;&#32;------&gt;&#32;&#32;&#32;&#32;&#32;50&#32;&#32;&#32;&#32;30&#32;&#32;&#32;------&gt;&#32;&#32;&#32;40&#32;&#32;&#32;30
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;/&#32;&#32;\&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;/&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;/&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;/
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;40&#32;&#32;50&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;40&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;40&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;50
</computeroutput></literallayout></para>
</section>
<section xml:id="_md_src_main_java_com_thealgorithms_datastructures_heaps__readme_1autotoc_md13">
<title>&lt;h2&gt;Time Complexity (Min Heap)&lt;/h2&gt;</title>

<para><informaltable frame="all">
    <tgroup cols="4" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
      <colspec colname='c3'/>
      <colspec colname='c4'/>
<thead>
      <row >
<entry>
<para>Operations </para>
</entry><entry>
<para>Sorted Array </para>
</entry><entry>
<para>UnSorted Array </para>
</entry><entry>
<para>Heap  </para>
</entry></row>
</thead><tbody>
      <row >
<entry>
<para>Add </para>
</entry><entry>
<para>O(N) </para>
</entry><entry>
<para>O(1) </para>
</entry><entry>
<para>O(logN)  
<literallayout>&#160;&#xa;</literallayout>
 </para>
</entry></row>
      <row >
<entry>
<para>Delete Minimum </para>
</entry><entry>
<para>O(N) </para>
</entry><entry>
<para>O(N) </para>
</entry><entry>
<para>O(logN)  </para>
</entry></row>
      <row >
<entry>
<para>Get Minimum </para>
</entry><entry>
<para>O(1) </para>
</entry><entry>
<para>O(N) </para>
</entry><entry>
<para>O(1)  </para>
</entry></row>
    </tbody>
    </tgroup>
</informaltable>
</para>
</section>
<section xml:id="_md_src_main_java_com_thealgorithms_datastructures_heaps__readme_1autotoc_md14">
<title>&lt;h2&gt;Applications of Heap Data Structure&lt;/h2&gt;</title>

<para><emphasis role="bold">Heapsort:</emphasis> Heapsort algorithm has limited uses because Quicksort is better in practice. Nevertheless, the Heap data structure itself is enormously used.</para>

<para><emphasis role="bold">Priority Queues:</emphasis> Priority queues can be efficiently implemented using Binary Heap because it supports insert(), delete() and extractmax(), decreaseKey() operations in O(logn) time. Binomoial Heap and Fibonacci Heap are variations of Binary Heap. These variations perform union also in O(logn) time which is a O(n) operation in Binary Heap. Heap Implemented priority queues are used in Graph algorithms like Prim’s Algorithm and Dijkstra’s algorithm.</para>

<para><emphasis role="bold">Order statistics:</emphasis> The Heap data structure can be used to efficiently find the kth smallest (or largest) element in an array. </para>
</section>
</section>
