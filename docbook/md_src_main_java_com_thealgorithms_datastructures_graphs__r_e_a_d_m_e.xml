<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_md_src_main_java_com_thealgorithms_datastructures_graphs__r_e_a_d_m_e" xml:lang="en-US">

<para>Graph is a useful data structure for representing most of the real world problems involving a set of users/candidates/nodes and their relations. A Graph consists of two parameters :</para>

<para><literallayout><computeroutput>V&#32;=&#32;a&#32;set&#32;of&#32;vertices
E&#32;=&#32;a&#32;set&#32;of&#32;edges
</computeroutput></literallayout></para>

<para>Each edge in <computeroutput>E</computeroutput> connects any two vertices from <computeroutput>V</computeroutput>. Based on the type of edge, graphs can be of two types:</para>

<para><orderedlist>
<listitem>
<para><emphasis role="bold">Directed</emphasis>: The edges are directed in nature which means that when there is an edge from node <computeroutput>A</computeroutput> to <computeroutput>B</computeroutput>, it does not imply that there is an edge from <computeroutput>B</computeroutput> to <computeroutput>A</computeroutput>. An example of directed edge graph the <emphasis role="bold">follow</emphasis> feature of social media. If you follow a celebrity, it doesn&apos;t imply that s/he follows you.</para>
</listitem><listitem>
<para><emphasis role="bold">Undirected</emphasis>: The edges don&apos;t have any direction. So if <computeroutput>A</computeroutput> and <computeroutput>B</computeroutput> are connected, we can assume that there is edge from both <computeroutput>A</computeroutput> to <computeroutput>B</computeroutput> and <computeroutput>B</computeroutput> to <computeroutput>A</computeroutput>. Example: Social media graph, where if two persons are friend, it implies that both are friend with each other.</para>
</listitem></orderedlist>
</para>
<section xml:id="_md_src_main_java_com_thealgorithms_datastructures_graphs__r_e_a_d_m_e_1autotoc_md1">
<title>Representation</title>

<para><orderedlist>
<listitem>
<para><emphasis role="bold">Adjacency Lists</emphasis>: Each node is represented as an entry and all the edges are represented as a list emerging from the corresponding node. So if vertex <computeroutput>1</computeroutput> has eadges to 2,3, and 6, the list corresponding to 1 will have 2,3 and 6 as entries. Consider the following graph.</para>
</listitem></orderedlist>
</para>

<para><literallayout><computeroutput>0:&#32;1--&gt;2--&gt;3
1:&#32;0--&gt;2
2:&#32;0--&gt;1
3:&#32;0--&gt;4
4:&#32;3
</computeroutput></literallayout> It means there are edges from 0 to 1, 2 and 3; from 1 to 0 and 2 and so on.<orderedlist>
<listitem>
<para><emphasis role="bold">Adjacency Matrix</emphasis>: The graph is represented as a matrix of size <computeroutput>|V| x |V|</computeroutput> and an entry 1 in cell <computeroutput>(i,j)</computeroutput> implies that there is an edge from i to j. 0 represents no edge. The mtrix for the above graph:</para>
</listitem></orderedlist>
</para>

<para><literallayout><computeroutput>&#32;&#32;&#32;0&#32;1&#32;2&#32;3&#32;4

0&#32;&#32;0&#32;1&#32;1&#32;1&#32;0
1&#32;&#32;1&#32;0&#32;1&#32;0&#32;0
2&#32;&#32;1&#32;1&#32;0&#32;0&#32;0
3&#32;&#32;1&#32;0&#32;0&#32;0&#32;1
4&#32;&#32;0&#32;0&#32;0&#32;1&#32;0
</computeroutput></literallayout> </para>
</section>
</section>
