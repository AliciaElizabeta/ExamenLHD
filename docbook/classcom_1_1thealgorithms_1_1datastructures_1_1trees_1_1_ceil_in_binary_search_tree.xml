<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classcom_1_1thealgorithms_1_1datastructures_1_1trees_1_1_ceil_in_binary_search_tree" xml:lang="en-US">
<title>com.thealgorithms.datastructures.trees.CeilInBinarySearchTree Class Reference</title>
<indexterm><primary>com.thealgorithms.datastructures.trees.CeilInBinarySearchTree</primary></indexterm>
<simplesect>
    <title>Static Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><anchor xml:id="_classcom_1_1thealgorithms_1_1datastructures_1_1trees_1_1_ceil_in_binary_search_tree_1a49cb1dc3ccb78aff6b52d1f76e425fd5"/>static Node <emphasis role="strong">getCeil</emphasis> (Node root, int key)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Problem Statement Ceil value for any number x in a collection is a number y which is either equal to x or the least greater number than x.</para>

<para>Problem: Given a binary search tree containing positive integer values. Find ceil value for a given key in O(lg(n)) time. In case if it is not present return -1.</para>

<para>Ex.1. [30,20,40,10,25,35,50] represents level order traversal of a binary search tree. Find ceil for 10. Answer: 20</para>

<para>Ex.2. [30,20,40,10,25,35,50] represents level order traversal of a binary search tree. Find ceil for 22 Answer: 25</para>

<para>Ex.2. [30,20,40,10,25,35,50] represents level order traversal of a binary search tree. Find ceil for 52 Answer: -1 Solution 1: Brute Force Solution: Do an inorder traversal and save result into an array. Iterate over the array to get an element equal to or greater than current key. Time Complexity: O(n) Space Complexity: O(n) for auxillary array to save inorder representation of tree. </para>

<para>Solution 2: Brute Force Solution: Do an inorder traversal and save result into an array.Since array is sorted do a binary search over the array to get an element equal to or greater than current key. Time Complexity: O(n) for traversal of tree and O(lg(n)) for binary search in array. Total = O(n) Space Complexity: O(n) for auxillary array to save inorder representation of tree. </para>

<para>Solution 3: Optimal We can do a DFS search on given tree in following fashion. i) if root is null then return null because then ceil doesn&apos;t exist ii) If key is lesser than root value than ceil will be in right subtree so call recursively on right subtree iii) if key is greater than current root, then either a) the root is ceil b) ceil is in left subtree: call for left subtree. If left subtree returns a non null value then that will be ceil otherwise the root is ceil </para>
<para>
The documentation for this class was generated from the following file:</para>
src/main/java/com/thealgorithms/datastructures/trees/CeilInBinarySearchTree.java</section>
</section>
