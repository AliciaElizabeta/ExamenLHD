.TH "com.thealgorithms.datastructures.trees.CreateBinaryTreeFromInorderPreorder" 3 "Fri Jan 28 2022" "Examen" \" -*- nroff -*-
.ad l
.nh
.SH NAME
com.thealgorithms.datastructures.trees.CreateBinaryTreeFromInorderPreorder
.SH SYNOPSIS
.br
.PP
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static void \fBmain\fP (String[] args)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Approach: Naive Solution: Create root node from first value present in preorder traversal\&. Look for the index of root node's value in inorder traversal\&. That will tell total nodes present in left subtree and right subtree\&. Based on that index create left and right subtree\&. Complexity: Time: O(n^2) for each node there is iteration to find index in inorder array Space: Stack size = O(height) = O(lg(n))
.PP
Optimized Solution: Instead of iterating over inorder array to find index of root value, create a hashmap and find out the index of root value\&. Complexity: Time: O(n) hashmap reduced iteration to find index in inorder array Space: O(n) space taken by hashmap 

.SH "Author"
.PP 
Generated automatically by Doxygen for Examen from the source code\&.
