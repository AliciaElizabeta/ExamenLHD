.TH "md_src_main_java_com_thealgorithms_datastructures_stacks__r_e_a_d_m_e" 3 "Fri Jan 28 2022" "Examen" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_src_main_java_com_thealgorithms_datastructures_stacks__r_e_a_d_m_e \- STACK 
Stack is an ADT (abstract data type) that acts like a list of objects but there is a difference\&.
.PP
Stack works on the principle of \fILIFO\fP (Last In First Out), it means that the last item added to the stack will be the first item to be removed\&.
.PP
Stack is based on two methods (functions)-
.SH "push(element)"
.PP
It adds 'element' to the top of the stack\&.
.PP
For example: If we have \fC1, 3, 5\fP in stack, and we call push(9),
.PP
\fC9\fP will be added to last index of stack -> \fC1, 3, 5 , 9\fP\&.
.SH "peek() or top()"
.PP
It returns element at the top of the stack\&.
.PP
For example: If we have \fC1, 3, 5\fP in stack, and we call peek(),
.PP
\fC5\fP will be returned (without removing it from the stack)\&.
.SH "pop()"
.PP
It removes the last element (i\&.e\&. top of stack) from stack\&.
.PP
For example: If we have \fC1, 3, 5 , 9\fP in stack, and we call pop(),
.PP
the function will return \fC9\fP and the stack will change to \fC1, 3, 5\fP\&. 
