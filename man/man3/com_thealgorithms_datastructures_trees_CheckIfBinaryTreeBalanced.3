.TH "com.thealgorithms.datastructures.trees.CheckIfBinaryTreeBalanced" 3 "Fri Jan 28 2022" "Examen" \" -*- nroff -*-
.ad l
.nh
.SH NAME
com.thealgorithms.datastructures.trees.CheckIfBinaryTreeBalanced
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBBinaryTree\fP"
.br
.ti -1c
.RI "class \fBBTNode\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "boolean \fBisBalancedRecursive\fP (BinaryTree binaryTree)"
.br
.ti -1c
.RI "boolean \fBisBalancedIterative\fP (BinaryTree binaryTree)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static void \fBmain\fP (String[] args)"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class will check if a \fBBinaryTree\fP is balanced\&. A balanced binary tree is defined as a binary tree where the differenced in height between the left and right subtree of each node differs by at most one\&.
.PP
This can be done in both an iterative and recursive fashion\&. Below, \fC\fBisBalancedRecursive()\fP\fP is implemented in a recursive fashion, and \fC\fBisBalancedIterative()\fP\fP is implemented in an iterative fashion\&.
.PP
\fBAuthor\fP
.RS 4
\fCIan Cowan\fP 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "boolean com\&.thealgorithms\&.datastructures\&.trees\&.CheckIfBinaryTreeBalanced\&.isBalancedIterative (BinaryTree binaryTree)"
Iterative is BT balanced implementation 
.SS "boolean com\&.thealgorithms\&.datastructures\&.trees\&.CheckIfBinaryTreeBalanced\&.isBalancedRecursive (BinaryTree binaryTree)"
Recursive is BT balanced implementation
.PP
\fBParameters\fP
.RS 4
\fIbinaryTree\fP The binary tree to check if balanced 
.RE
.PP

.SS "static void com\&.thealgorithms\&.datastructures\&.trees\&.CheckIfBinaryTreeBalanced\&.main (String[] args)\fC [static]\fP"
Main 

.SH "Author"
.PP 
Generated automatically by Doxygen for Examen from the source code\&.
