.TH "com.thealgorithms.dynamicprogramming.Fibonacci" 3 "Fri Jan 28 2022" "Examen" \" -*- nroff -*-
.ad l
.nh
.SH NAME
com.thealgorithms.dynamicprogramming.Fibonacci
.SH SYNOPSIS
.br
.PP
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static void \fBmain\fP (String[] args)"
.br
.ti -1c
.RI "static int \fBfibMemo\fP (int n)"
.br
.ti -1c
.RI "static int \fBfibBotUp\fP (int n)"
.br
.ti -1c
.RI "static int \fBfibOptimized\fP (int n)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.PP
\fBAuthor\fP
.RS 4
Varun Upadhyay (https://github.com/varunu28) 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "static int com\&.thealgorithms\&.dynamicprogramming\&.Fibonacci\&.fibBotUp (int n)\fC [static]\fP"
This method finds the nth fibonacci number using bottom up
.PP
\fBParameters\fP
.RS 4
\fIn\fP The input n for which we have to determine the fibonacci number Outputs the nth fibonacci number 
.RE
.PP

.SS "static int com\&.thealgorithms\&.dynamicprogramming\&.Fibonacci\&.fibMemo (int n)\fC [static]\fP"
This method finds the nth fibonacci number using memoization technique
.PP
\fBParameters\fP
.RS 4
\fIn\fP The input n for which we have to determine the fibonacci number Outputs the nth fibonacci number 
.RE
.PP

.SS "static int com\&.thealgorithms\&.dynamicprogramming\&.Fibonacci\&.fibOptimized (int n)\fC [static]\fP"
This method finds the nth fibonacci number using bottom up
.PP
\fBParameters\fP
.RS 4
\fIn\fP The input n for which we have to determine the fibonacci number Outputs the nth fibonacci number 
.RE
.PP
This is optimized version of \fBFibonacci\fP Program\&. Without using Hashmap and recursion\&. It saves both memory and time\&. Space Complexity will be O(1) Time Complexity will be O(n) 
.PP
Whereas , the above functions will take O(n) Space\&. 
.PP
\fBAuthor\fP
.RS 4
Shoaib Rayeen (https://github.com/shoaibrayeen) 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Examen from the source code\&.
